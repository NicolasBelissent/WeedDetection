{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ZSL_extract_text_embeddings","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyM01M7DYarx36gUWYhSct1k"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"GfW8FEjgcb9K","executionInfo":{"status":"ok","timestamp":1658923058318,"user_tz":-60,"elapsed":28050,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1435a942-3dbd-4581-ebcf-8d47ce573894"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["%matplotlib inline\n","\n","import matplotlib.pyplot as plt\n","import torch\n","import torchvision\n","from torchvision import datasets, transforms\n","import helper\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from torch.utils.data import Subset\n","import torchvision.models as models\n","import torch.nn as nn\n","import torch.optim as optim\n","from sklearn.metrics import classification_report,accuracy_score\n","from google.colab import files\n","from google.colab import drive\n","import time\n","\n","import gensim\n","\n","import json\n","import numpy as np\n","from collections import OrderedDict\n","import csv\n","import glob\n","import gensim.downloader\n","import matplotlib.pyplot as plt\n","import pickle\n","import os\n","import nltk\n","from nltk.stem import WordNetLemmatizer\n","import string\n","from nltk.corpus import stopwords\n","import pandas as pd\n","\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["path_to_data = 'drive/MyDrive/deepweeds_data_zsl/images/training'\n","path_to_testing = 'drive/MyDrive/deepweeds_data_zsl/images/testing'\n","path_to_model = 'drive/MyDrive/trained_models/deepweeds_resnet50_pretrained'"],"metadata":{"id":"bElJHU0PchBs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Building model to extract image based embeddings"],"metadata":{"id":"jLYYBfpXiPfY"}},{"cell_type":"markdown","source":["Building model to extract semantic embeddings"],"metadata":{"id":"R0JjfbARkn_N"}},{"cell_type":"code","source":["nlpmodel = gensim.downloader.load('glove-twitter-25')\n","print('Glove model has been loaded...')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w5ZtPRu-huK2","executionInfo":{"status":"ok","timestamp":1658923121488,"user_tz":-60,"elapsed":63173,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"9fa1aaa0-c561-47f4-d9a0-7667c8c81895"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[==================================================] 100.0% 104.8/104.8MB downloaded\n","Glove model has been loaded...\n"]}]},{"cell_type":"code","source":["def load_dict(path):\n","    with open(path, 'rb') as f:\n","        jsonfile = json.load(f)\n","        return jsonfile\n","\n","def getMeanVectors( model, text):\n","    \"\"\"\n","    computes mean question or query vector\n","    \"\"\"\n","    terms2vec = [term for term in text if term in model.wv]\n","    try:\n","        return np.mean(model[terms2vec], axis=0)\n","    except:\n","        # return vector of empty values - length of 300 becaus ewe are using word2vec\n","        return np.zeros(25)\n","\n","def preprocessing(data):\n","    \"\"\"\n","\n","    This function preprocessed raw text input. \n","\n","\tParameters\n","\t----------\n","\tdata - raw text in string format \n","\n","\tReturns\n","\t-------\n","\tterms - preprocessed version of the text\n","\n","    \"\"\"\n","    stop_words = list(stopwords.words('english'))\n"," \n","    lemmatizer = WordNetLemmatizer()\n","\n","    for character in string.punctuation:\n","        data = data.replace(character, ' ')\n","\n","    tokenized = data.split()\n","    tagged = nltk.pos_tag(tokenized)\n","    tagged_nouns = filter(lambda x:x[1]=='NN',tagged)\n","    relevant_nouns = [lemmatizer.lemmatize(n[0]) for n in tagged_nouns]\n","    \n","    terms = []\n","    for sw in relevant_nouns:\n","        if sw.lower() not in stop_words:\n","            terms.append(sw.lower())\n","    return terms "],"metadata":{"id":"OJ_3_Xvhh0ZJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class SemanticSpace():\n","\n","    def __init__(self, path):\n","        self.qa_dict = load_dict(path)\n","\n","    def parse(self):\n","        \"\"\"\n","        Read in QA pairs from a dictionnary.\n","\n","        Args:\n","            self\n","        \n","        Returns:\n","            contexts (list): List of contexts for QAs.\n","            questions (list): List of questions.\n","            answers (list): List of corresponding answers.\n","        \"\"\"\n","        # Initialize lists for contexts, questions, and answers\n","        names = []\n","        families = []\n","        types = []\n","        descriptions = []\n","        habitats = []\n","\n","        # Iterate through all data\n","        for all_classes in self.qa_dict['class_information']:\n","            for single_class in all_classes:\n","                names.append(str(single_class))\n","                for info in all_classes[str(single_class)]:\n","                    families.append(info['family'])\n","                    types.append(info['type'])\n","                    descriptions.append(info['description'])\n","                    habitats.append(info['habitat'])\n","    \n","        # Return data lists\n","        return names, habitats, types, families, descriptions"],"metadata":{"id":"wg9Ope2Nh1Tr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ss = SemanticSpace('drive/MyDrive/ZSL_test_suite/deepweeds_class_information.json')"],"metadata":{"id":"mPJi8TVmiB8q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","names, habitats, types, families, descriptions = ss.parse()\n","N = len(names)\n","# Get Description vectors\n","descriptions_vectors = []\n","for i in range(N):\n","    descriptions_vectors.append(getMeanVectors(nlpmodel ,descriptions[i]))\n","\n","# Get Habitat vectors\n","habitats_vectors = []\n","for i in range(N):\n","    habitats_vectors.append(getMeanVectors(nlpmodel ,habitats[i]))\n","\n","# Stack vectors to create semantic space\n","semantic_embeddings = []\n","for i in range(N):\n","    semantic_embeddings.append(np.hstack((descriptions_vectors[i], habitats_vectors[i])))\n","glove_size = len(semantic_embeddings[1])\n","\n","\n","np.savetxt(\"ground_truth_text_embeddings.csv\", np.vstack(semantic_embeddings), delimiter=\",\")\n","files.download('ground_truth_text_embeddings.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":69},"id":"CuzCyUPMiLdY","executionInfo":{"status":"ok","timestamp":1658923121979,"user_tz":-60,"elapsed":192,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"61ac41bd-193e-44cb-f23c-0a0393cea4d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: DeprecationWarning: Call to deprecated `wv` (Attribute will be removed in 4.0.0, use self instead).\n","  # Remove the CWD from sys.path while we load stuff.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_61f63040-fa67-46cf-968e-add8d8a54c11\", \"ground_truth_text_embeddings.csv\", 10246)"]},"metadata":{}}]},{"cell_type":"markdown","source":["Extracting both semantic and image embeddings"],"metadata":{"id":"kSpjTvNKiesH"}},{"cell_type":"code","source":["transform = transforms.Compose([transforms.Resize(255),\n","                              transforms.CenterCrop(224),\n","                              transforms.ToTensor()])\n","\n","# load your dataset\n","dataset = datasets.ImageFolder(path_to_data, transform=transform)\n","class_dict = dataset.class_to_idx\n","\n","batch_size = 10\n","dataloaders = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=2)\n"],"metadata":{"id":"HbeNSdORYN9o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["path_to_data = 'drive/MyDrive/deepweeds_data_zsl/images/training'\n","path_to_testing = 'drive/MyDrive/deepweeds_data_zsl/images/testing'\n","path_to_model = 'drive/MyDrive/trained_models/deepweeds_resnet50_pretrained'\n","\n","class Identity(nn.Module):\n","    def __init__(self):\n","        super(Identity, self).__init__()\n","        \n","    def forward(self, x):\n","        return x\n","\n","def set_parameter_requires_grad(model, feature_extracting):\n","    if feature_extracting:\n","        for param in model.parameters():\n","            param.requires_grad = False\n","\n","\n","# build model to map pretrained deepweeds model\n","model = models.resnet50()\n","set_parameter_requires_grad(model, True)\n","model.fc = nn.Linear(2048, 9)\n","model.load_state_dict(torch.load(path_to_model), strict=False)\n","\n","# removing the output layers\n","model.fc =Identity()\n","transform = transforms.Compose([transforms.Resize(255),\n","                              transforms.CenterCrop(224),\n","                              transforms.ToTensor()])\n","\n","# load your dataset\n","dataset = datasets.ImageFolder(path_to_data, transform=transform)\n","class_dict = dataset.class_to_idx\n","print(class_dict)\n","\n","batch_size = 10\n","dataloaders = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=2)\n","\n","from tqdm import trange, tqdm\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","\n","if torch.cuda.is_available():\n","  model = model.to(device)\n","  model.eval()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8hs0w9WhPkff","executionInfo":{"status":"ok","timestamp":1658923331688,"user_tz":-60,"elapsed":6718,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"1f3b024a-3b1d-4570-c785-29eff78cec5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Chinese Apple': 0, 'Lantana': 1, 'Parkinsonia': 2, 'Parthenium': 3, 'Siam Weed': 4, 'Snake Weed': 5}\n"]}]},{"cell_type":"code","source":["def getTextEmbeddings(labels, embedding_info):\n","  embeddings =np.zeros((len(labels), embedding_info[0].shape[0]))\n","  for i in range(len(labels)):\n","    embeddings[i,:] = embedding_info[int(labels[i])]\n","  return embeddings\n","\n","text_embeddings = np.zeros((5068, glove_size))\n","image_embeddings = np.zeros((5068, 2048))\n","\n","train_labels = []\n","batch_ct = 0\n","for id,(inputs, labels) in enumerate(dataloaders):\n","  print('Built embedding for batch {} out of {}'.format(id+1, len(dataloaders)))\n","  t = time.time()\n","  #offload dataloader\n","  inputs = inputs.to(device)\n","  labels = labels.to(device)\n","  \n","  #get labels\n","  train_labels += list(labels.cpu().data.numpy())\n","  \n","  # get image embeddings\n","  batch_image_embeddings = model(inputs).cpu().data.numpy()\n","  image_embeddings[batch_ct:batch_ct+batch_image_embeddings.shape[0], 0:batch_image_embeddings.shape[1]] += batch_image_embeddings\n","\n","  # get text embeddings\n","  batch_text_embeddings = getTextEmbeddings(labels, semantic_embeddings)\n","  text_embeddings[batch_ct:batch_ct+batch_text_embeddings.shape[0], 0:batch_text_embeddings.shape[1]] += batch_text_embeddings\n","\n","  batch_ct += batch_size\n","  print(time.time() - t)\n","\n","\n"],"metadata":{"id":"d4G0YVRReI-7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658924080442,"user_tz":-60,"elapsed":216853,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"2b2a0042-d18f-44b8-a209-4ea7ff76b1d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Built embedding for batch 1 out of 507\n","0.023756980895996094\n","Built embedding for batch 2 out of 507\n","0.022772550582885742\n","Built embedding for batch 3 out of 507\n","0.0216982364654541\n","Built embedding for batch 4 out of 507\n","0.0213010311126709\n","Built embedding for batch 5 out of 507\n","0.022696733474731445\n","Built embedding for batch 6 out of 507\n","0.021165847778320312\n","Built embedding for batch 7 out of 507\n","0.0212399959564209\n","Built embedding for batch 8 out of 507\n","0.02134394645690918\n","Built embedding for batch 9 out of 507\n","0.035430192947387695\n","Built embedding for batch 10 out of 507\n","0.02140641212463379\n","Built embedding for batch 11 out of 507\n","0.021282196044921875\n","Built embedding for batch 12 out of 507\n","0.020914077758789062\n","Built embedding for batch 13 out of 507\n","0.02071857452392578\n","Built embedding for batch 14 out of 507\n","0.021046876907348633\n","Built embedding for batch 15 out of 507\n","0.020964384078979492\n","Built embedding for batch 16 out of 507\n","0.02433943748474121\n","Built embedding for batch 17 out of 507\n","0.021065235137939453\n","Built embedding for batch 18 out of 507\n","0.021876811981201172\n","Built embedding for batch 19 out of 507\n","0.02198052406311035\n","Built embedding for batch 20 out of 507\n","0.02137923240661621\n","Built embedding for batch 21 out of 507\n","0.021199941635131836\n","Built embedding for batch 22 out of 507\n","0.020847558975219727\n","Built embedding for batch 23 out of 507\n","0.021131277084350586\n","Built embedding for batch 24 out of 507\n","0.0265805721282959\n","Built embedding for batch 25 out of 507\n","0.021080970764160156\n","Built embedding for batch 26 out of 507\n","0.023234128952026367\n","Built embedding for batch 27 out of 507\n","0.023822307586669922\n","Built embedding for batch 28 out of 507\n","0.023522138595581055\n","Built embedding for batch 29 out of 507\n","0.02121114730834961\n","Built embedding for batch 30 out of 507\n","0.020899295806884766\n","Built embedding for batch 31 out of 507\n","0.021358728408813477\n","Built embedding for batch 32 out of 507\n","0.021142005920410156\n","Built embedding for batch 33 out of 507\n","0.021826744079589844\n","Built embedding for batch 34 out of 507\n","0.021258831024169922\n","Built embedding for batch 35 out of 507\n","0.03019261360168457\n","Built embedding for batch 36 out of 507\n","0.020873546600341797\n","Built embedding for batch 37 out of 507\n","0.021073579788208008\n","Built embedding for batch 38 out of 507\n","0.02176523208618164\n","Built embedding for batch 39 out of 507\n","0.02117609977722168\n","Built embedding for batch 40 out of 507\n","0.0214846134185791\n","Built embedding for batch 41 out of 507\n","0.021210432052612305\n","Built embedding for batch 42 out of 507\n","0.022277355194091797\n","Built embedding for batch 43 out of 507\n","0.020975589752197266\n","Built embedding for batch 44 out of 507\n","0.02089214324951172\n","Built embedding for batch 45 out of 507\n","0.02125382423400879\n","Built embedding for batch 46 out of 507\n","0.022260189056396484\n","Built embedding for batch 47 out of 507\n","0.021803617477416992\n","Built embedding for batch 48 out of 507\n","0.021062850952148438\n","Built embedding for batch 49 out of 507\n","0.02168750762939453\n","Built embedding for batch 50 out of 507\n","0.02097797393798828\n","Built embedding for batch 51 out of 507\n","0.02086782455444336\n","Built embedding for batch 52 out of 507\n","0.021946430206298828\n","Built embedding for batch 53 out of 507\n","0.021412134170532227\n","Built embedding for batch 54 out of 507\n","0.021239519119262695\n","Built embedding for batch 55 out of 507\n","0.02142477035522461\n","Built embedding for batch 56 out of 507\n","0.02150702476501465\n","Built embedding for batch 57 out of 507\n","0.021322965621948242\n","Built embedding for batch 58 out of 507\n","0.020985126495361328\n","Built embedding for batch 59 out of 507\n","0.021022558212280273\n","Built embedding for batch 60 out of 507\n","0.021371126174926758\n","Built embedding for batch 61 out of 507\n","0.021765947341918945\n","Built embedding for batch 62 out of 507\n","0.029912710189819336\n","Built embedding for batch 63 out of 507\n","0.026819944381713867\n","Built embedding for batch 64 out of 507\n","0.021190881729125977\n","Built embedding for batch 65 out of 507\n","0.02096247673034668\n","Built embedding for batch 66 out of 507\n","0.022202014923095703\n","Built embedding for batch 67 out of 507\n","0.021578550338745117\n","Built embedding for batch 68 out of 507\n","0.02145671844482422\n","Built embedding for batch 69 out of 507\n","0.021193742752075195\n","Built embedding for batch 70 out of 507\n","0.02243328094482422\n","Built embedding for batch 71 out of 507\n","0.021290063858032227\n","Built embedding for batch 72 out of 507\n","0.02820301055908203\n","Built embedding for batch 73 out of 507\n","0.020982742309570312\n","Built embedding for batch 74 out of 507\n","0.021639108657836914\n","Built embedding for batch 75 out of 507\n","0.021732091903686523\n","Built embedding for batch 76 out of 507\n","0.021207332611083984\n","Built embedding for batch 77 out of 507\n","0.021169185638427734\n","Built embedding for batch 78 out of 507\n","0.022428512573242188\n","Built embedding for batch 79 out of 507\n","0.021085500717163086\n","Built embedding for batch 80 out of 507\n","0.021516084671020508\n","Built embedding for batch 81 out of 507\n","0.021806001663208008\n","Built embedding for batch 82 out of 507\n","0.02086782455444336\n","Built embedding for batch 83 out of 507\n","0.021215200424194336\n","Built embedding for batch 84 out of 507\n","0.020928382873535156\n","Built embedding for batch 85 out of 507\n","0.02113509178161621\n","Built embedding for batch 86 out of 507\n","0.02089691162109375\n","Built embedding for batch 87 out of 507\n","0.021193981170654297\n","Built embedding for batch 88 out of 507\n","0.02174234390258789\n","Built embedding for batch 89 out of 507\n","0.02124810218811035\n","Built embedding for batch 90 out of 507\n","0.020995378494262695\n","Built embedding for batch 91 out of 507\n","0.021477699279785156\n","Built embedding for batch 92 out of 507\n","0.021036863327026367\n","Built embedding for batch 93 out of 507\n","0.024077177047729492\n","Built embedding for batch 94 out of 507\n","0.022384166717529297\n","Built embedding for batch 95 out of 507\n","0.023244619369506836\n","Built embedding for batch 96 out of 507\n","0.020947694778442383\n","Built embedding for batch 97 out of 507\n","0.02756810188293457\n","Built embedding for batch 98 out of 507\n","0.021773338317871094\n","Built embedding for batch 99 out of 507\n","0.02128005027770996\n","Built embedding for batch 100 out of 507\n","0.021090030670166016\n","Built embedding for batch 101 out of 507\n","0.021311283111572266\n","Built embedding for batch 102 out of 507\n","0.02216315269470215\n","Built embedding for batch 103 out of 507\n","0.0211334228515625\n","Built embedding for batch 104 out of 507\n","0.021309852600097656\n","Built embedding for batch 105 out of 507\n","0.020757675170898438\n","Built embedding for batch 106 out of 507\n","0.021228790283203125\n","Built embedding for batch 107 out of 507\n","0.02239680290222168\n","Built embedding for batch 108 out of 507\n","0.021019697189331055\n","Built embedding for batch 109 out of 507\n","0.02115797996520996\n","Built embedding for batch 110 out of 507\n","0.021223068237304688\n","Built embedding for batch 111 out of 507\n","0.021049976348876953\n","Built embedding for batch 112 out of 507\n","0.021092653274536133\n","Built embedding for batch 113 out of 507\n","0.021387100219726562\n","Built embedding for batch 114 out of 507\n","0.02114272117614746\n","Built embedding for batch 115 out of 507\n","0.021892786026000977\n","Built embedding for batch 116 out of 507\n","0.022529125213623047\n","Built embedding for batch 117 out of 507\n","0.02251291275024414\n","Built embedding for batch 118 out of 507\n","0.02129077911376953\n","Built embedding for batch 119 out of 507\n","0.025613069534301758\n","Built embedding for batch 120 out of 507\n","0.021572351455688477\n","Built embedding for batch 121 out of 507\n","0.02160501480102539\n","Built embedding for batch 122 out of 507\n","0.0212094783782959\n","Built embedding for batch 123 out of 507\n","0.020998239517211914\n","Built embedding for batch 124 out of 507\n","0.02106332778930664\n","Built embedding for batch 125 out of 507\n","0.020814180374145508\n","Built embedding for batch 126 out of 507\n","0.02100062370300293\n","Built embedding for batch 127 out of 507\n","0.025528669357299805\n","Built embedding for batch 128 out of 507\n","0.022332429885864258\n","Built embedding for batch 129 out of 507\n","0.021284103393554688\n","Built embedding for batch 130 out of 507\n","0.02112412452697754\n","Built embedding for batch 131 out of 507\n","0.021883726119995117\n","Built embedding for batch 132 out of 507\n","0.02103710174560547\n","Built embedding for batch 133 out of 507\n","0.020956039428710938\n","Built embedding for batch 134 out of 507\n","0.020920991897583008\n","Built embedding for batch 135 out of 507\n","0.02225637435913086\n","Built embedding for batch 136 out of 507\n","0.0211946964263916\n","Built embedding for batch 137 out of 507\n","0.021068334579467773\n","Built embedding for batch 138 out of 507\n","0.021195411682128906\n","Built embedding for batch 139 out of 507\n","0.02138209342956543\n","Built embedding for batch 140 out of 507\n","0.021192550659179688\n","Built embedding for batch 141 out of 507\n","0.021800518035888672\n","Built embedding for batch 142 out of 507\n","0.021005868911743164\n","Built embedding for batch 143 out of 507\n","0.021031618118286133\n","Built embedding for batch 144 out of 507\n","0.02121567726135254\n","Built embedding for batch 145 out of 507\n","0.021392107009887695\n","Built embedding for batch 146 out of 507\n","0.0212557315826416\n","Built embedding for batch 147 out of 507\n","0.02094268798828125\n","Built embedding for batch 148 out of 507\n","0.021150827407836914\n","Built embedding for batch 149 out of 507\n","0.021759748458862305\n","Built embedding for batch 150 out of 507\n","0.02091360092163086\n","Built embedding for batch 151 out of 507\n","0.02129650115966797\n","Built embedding for batch 152 out of 507\n","0.021275043487548828\n","Built embedding for batch 153 out of 507\n","0.02114701271057129\n","Built embedding for batch 154 out of 507\n","0.021306753158569336\n","Built embedding for batch 155 out of 507\n","0.02154827117919922\n","Built embedding for batch 156 out of 507\n","0.022069692611694336\n","Built embedding for batch 157 out of 507\n","0.021166563034057617\n","Built embedding for batch 158 out of 507\n","0.02104496955871582\n","Built embedding for batch 159 out of 507\n","0.020984172821044922\n","Built embedding for batch 160 out of 507\n","0.02285003662109375\n","Built embedding for batch 161 out of 507\n","0.021154165267944336\n","Built embedding for batch 162 out of 507\n","0.020982742309570312\n","Built embedding for batch 163 out of 507\n","0.020719289779663086\n","Built embedding for batch 164 out of 507\n","0.02384662628173828\n","Built embedding for batch 165 out of 507\n","0.030269622802734375\n","Built embedding for batch 166 out of 507\n","0.02150249481201172\n","Built embedding for batch 167 out of 507\n","0.022022247314453125\n","Built embedding for batch 168 out of 507\n","0.021115779876708984\n","Built embedding for batch 169 out of 507\n","0.020880699157714844\n","Built embedding for batch 170 out of 507\n","0.021120548248291016\n","Built embedding for batch 171 out of 507\n","0.020776748657226562\n","Built embedding for batch 172 out of 507\n","0.021100759506225586\n","Built embedding for batch 173 out of 507\n","0.02094411849975586\n","Built embedding for batch 174 out of 507\n","0.0221250057220459\n","Built embedding for batch 175 out of 507\n","0.02192401885986328\n","Built embedding for batch 176 out of 507\n","0.020869970321655273\n","Built embedding for batch 177 out of 507\n","0.02636408805847168\n","Built embedding for batch 178 out of 507\n","0.021227121353149414\n","Built embedding for batch 179 out of 507\n","0.026601314544677734\n","Built embedding for batch 180 out of 507\n","0.021181344985961914\n","Built embedding for batch 181 out of 507\n","0.021824121475219727\n","Built embedding for batch 182 out of 507\n","0.021097660064697266\n","Built embedding for batch 183 out of 507\n","0.021116256713867188\n","Built embedding for batch 184 out of 507\n","0.021779775619506836\n","Built embedding for batch 185 out of 507\n","0.021204710006713867\n","Built embedding for batch 186 out of 507\n","0.02094268798828125\n","Built embedding for batch 187 out of 507\n","0.021033525466918945\n","Built embedding for batch 188 out of 507\n","0.02197742462158203\n","Built embedding for batch 189 out of 507\n","0.02097630500793457\n","Built embedding for batch 190 out of 507\n","0.02185821533203125\n","Built embedding for batch 191 out of 507\n","0.021077632904052734\n","Built embedding for batch 192 out of 507\n","0.021114826202392578\n","Built embedding for batch 193 out of 507\n","0.021519184112548828\n","Built embedding for batch 194 out of 507\n","0.021040678024291992\n","Built embedding for batch 195 out of 507\n","0.02084040641784668\n","Built embedding for batch 196 out of 507\n","0.021394968032836914\n","Built embedding for batch 197 out of 507\n","0.02102518081665039\n","Built embedding for batch 198 out of 507\n","0.021036386489868164\n","Built embedding for batch 199 out of 507\n","0.021326541900634766\n","Built embedding for batch 200 out of 507\n","0.021083593368530273\n","Built embedding for batch 201 out of 507\n","0.021537303924560547\n","Built embedding for batch 202 out of 507\n","0.02102494239807129\n","Built embedding for batch 203 out of 507\n","0.021301984786987305\n","Built embedding for batch 204 out of 507\n","0.022765159606933594\n","Built embedding for batch 205 out of 507\n","0.021527767181396484\n","Built embedding for batch 206 out of 507\n","0.021038055419921875\n","Built embedding for batch 207 out of 507\n","0.023694753646850586\n","Built embedding for batch 208 out of 507\n","0.021349668502807617\n","Built embedding for batch 209 out of 507\n","0.022417306900024414\n","Built embedding for batch 210 out of 507\n","0.02195286750793457\n","Built embedding for batch 211 out of 507\n","0.021087169647216797\n","Built embedding for batch 212 out of 507\n","0.02161431312561035\n","Built embedding for batch 213 out of 507\n","0.0213620662689209\n","Built embedding for batch 214 out of 507\n","0.02106022834777832\n","Built embedding for batch 215 out of 507\n","0.02155447006225586\n","Built embedding for batch 216 out of 507\n","0.02111029624938965\n","Built embedding for batch 217 out of 507\n","0.020917415618896484\n","Built embedding for batch 218 out of 507\n","0.021600008010864258\n","Built embedding for batch 219 out of 507\n","0.022299766540527344\n","Built embedding for batch 220 out of 507\n","0.020815372467041016\n","Built embedding for batch 221 out of 507\n","0.02092146873474121\n","Built embedding for batch 222 out of 507\n","0.020997285842895508\n","Built embedding for batch 223 out of 507\n","0.02155327796936035\n","Built embedding for batch 224 out of 507\n","0.024479150772094727\n","Built embedding for batch 225 out of 507\n","0.021500349044799805\n","Built embedding for batch 226 out of 507\n","0.02076578140258789\n","Built embedding for batch 227 out of 507\n","0.021298646926879883\n","Built embedding for batch 228 out of 507\n","0.02131819725036621\n","Built embedding for batch 229 out of 507\n","0.020840167999267578\n","Built embedding for batch 230 out of 507\n","0.021715164184570312\n","Built embedding for batch 231 out of 507\n","0.021185874938964844\n","Built embedding for batch 232 out of 507\n","0.021073341369628906\n","Built embedding for batch 233 out of 507\n","0.021146059036254883\n","Built embedding for batch 234 out of 507\n","0.02121877670288086\n","Built embedding for batch 235 out of 507\n","0.024790525436401367\n","Built embedding for batch 236 out of 507\n","0.021327733993530273\n","Built embedding for batch 237 out of 507\n","0.021518468856811523\n","Built embedding for batch 238 out of 507\n","0.022043704986572266\n","Built embedding for batch 239 out of 507\n","0.021028518676757812\n","Built embedding for batch 240 out of 507\n","0.021419763565063477\n","Built embedding for batch 241 out of 507\n","0.02109074592590332\n","Built embedding for batch 242 out of 507\n","0.024782180786132812\n","Built embedding for batch 243 out of 507\n","0.02109217643737793\n","Built embedding for batch 244 out of 507\n","0.021187305450439453\n","Built embedding for batch 245 out of 507\n","0.021117448806762695\n","Built embedding for batch 246 out of 507\n","0.020920753479003906\n","Built embedding for batch 247 out of 507\n","0.021152019500732422\n","Built embedding for batch 248 out of 507\n","0.0219881534576416\n","Built embedding for batch 249 out of 507\n","0.021041393280029297\n","Built embedding for batch 250 out of 507\n","0.024943828582763672\n","Built embedding for batch 251 out of 507\n","0.020975828170776367\n","Built embedding for batch 252 out of 507\n","0.021012067794799805\n","Built embedding for batch 253 out of 507\n","0.0211789608001709\n","Built embedding for batch 254 out of 507\n","0.021047115325927734\n","Built embedding for batch 255 out of 507\n","0.020896196365356445\n","Built embedding for batch 256 out of 507\n","0.021031618118286133\n","Built embedding for batch 257 out of 507\n","0.02245044708251953\n","Built embedding for batch 258 out of 507\n","0.02227163314819336\n","Built embedding for batch 259 out of 507\n","0.021240949630737305\n","Built embedding for batch 260 out of 507\n","0.02099776268005371\n","Built embedding for batch 261 out of 507\n","0.021235942840576172\n","Built embedding for batch 262 out of 507\n","0.02133464813232422\n","Built embedding for batch 263 out of 507\n","0.02268075942993164\n","Built embedding for batch 264 out of 507\n","0.021035194396972656\n","Built embedding for batch 265 out of 507\n","0.020819425582885742\n","Built embedding for batch 266 out of 507\n","0.020932912826538086\n","Built embedding for batch 267 out of 507\n","0.021810293197631836\n","Built embedding for batch 268 out of 507\n","0.022055387496948242\n","Built embedding for batch 269 out of 507\n","0.02100372314453125\n","Built embedding for batch 270 out of 507\n","0.021527528762817383\n","Built embedding for batch 271 out of 507\n","0.0209505558013916\n","Built embedding for batch 272 out of 507\n","0.021045207977294922\n","Built embedding for batch 273 out of 507\n","0.02086043357849121\n","Built embedding for batch 274 out of 507\n","0.020952224731445312\n","Built embedding for batch 275 out of 507\n","0.020885229110717773\n","Built embedding for batch 276 out of 507\n","0.02151942253112793\n","Built embedding for batch 277 out of 507\n","0.02092456817626953\n","Built embedding for batch 278 out of 507\n","0.021456480026245117\n","Built embedding for batch 279 out of 507\n","0.023814916610717773\n","Built embedding for batch 280 out of 507\n","0.021255970001220703\n","Built embedding for batch 281 out of 507\n","0.02104020118713379\n","Built embedding for batch 282 out of 507\n","0.021068096160888672\n","Built embedding for batch 283 out of 507\n","0.021434307098388672\n","Built embedding for batch 284 out of 507\n","0.02192544937133789\n","Built embedding for batch 285 out of 507\n","0.02121734619140625\n","Built embedding for batch 286 out of 507\n","0.021075963973999023\n","Built embedding for batch 287 out of 507\n","0.021185874938964844\n","Built embedding for batch 288 out of 507\n","0.021361827850341797\n","Built embedding for batch 289 out of 507\n","0.02109217643737793\n","Built embedding for batch 290 out of 507\n","0.0210421085357666\n","Built embedding for batch 291 out of 507\n","0.020914554595947266\n","Built embedding for batch 292 out of 507\n","0.021047115325927734\n","Built embedding for batch 293 out of 507\n","0.021770238876342773\n","Built embedding for batch 294 out of 507\n","0.020939111709594727\n","Built embedding for batch 295 out of 507\n","0.021373987197875977\n","Built embedding for batch 296 out of 507\n","0.020989179611206055\n","Built embedding for batch 297 out of 507\n","0.021867036819458008\n","Built embedding for batch 298 out of 507\n","0.021769046783447266\n","Built embedding for batch 299 out of 507\n","0.021615266799926758\n","Built embedding for batch 300 out of 507\n","0.02197742462158203\n","Built embedding for batch 301 out of 507\n","0.021503686904907227\n","Built embedding for batch 302 out of 507\n","0.020983457565307617\n","Built embedding for batch 303 out of 507\n","0.02094435691833496\n","Built embedding for batch 304 out of 507\n","0.021544218063354492\n","Built embedding for batch 305 out of 507\n","0.021061182022094727\n","Built embedding for batch 306 out of 507\n","0.021059513092041016\n","Built embedding for batch 307 out of 507\n","0.021207332611083984\n","Built embedding for batch 308 out of 507\n","0.02121257781982422\n","Built embedding for batch 309 out of 507\n","0.02154707908630371\n","Built embedding for batch 310 out of 507\n","0.021142959594726562\n","Built embedding for batch 311 out of 507\n","0.021279096603393555\n","Built embedding for batch 312 out of 507\n","0.02141427993774414\n","Built embedding for batch 313 out of 507\n","0.021791458129882812\n","Built embedding for batch 314 out of 507\n","0.021015405654907227\n","Built embedding for batch 315 out of 507\n","0.021872282028198242\n","Built embedding for batch 316 out of 507\n","0.029857158660888672\n","Built embedding for batch 317 out of 507\n","0.021080970764160156\n","Built embedding for batch 318 out of 507\n","0.02162313461303711\n","Built embedding for batch 319 out of 507\n","0.021651029586791992\n","Built embedding for batch 320 out of 507\n","0.0209805965423584\n","Built embedding for batch 321 out of 507\n","0.020970582962036133\n","Built embedding for batch 322 out of 507\n","0.020888566970825195\n","Built embedding for batch 323 out of 507\n","0.021088361740112305\n","Built embedding for batch 324 out of 507\n","0.028157472610473633\n","Built embedding for batch 325 out of 507\n","0.02187514305114746\n","Built embedding for batch 326 out of 507\n","0.020749807357788086\n","Built embedding for batch 327 out of 507\n","0.021033763885498047\n","Built embedding for batch 328 out of 507\n","0.020934104919433594\n","Built embedding for batch 329 out of 507\n","0.022796630859375\n","Built embedding for batch 330 out of 507\n","0.020815372467041016\n","Built embedding for batch 331 out of 507\n","0.02177596092224121\n","Built embedding for batch 332 out of 507\n","0.02132868766784668\n","Built embedding for batch 333 out of 507\n","0.02904367446899414\n","Built embedding for batch 334 out of 507\n","0.021195173263549805\n","Built embedding for batch 335 out of 507\n","0.02162909507751465\n","Built embedding for batch 336 out of 507\n","0.021267414093017578\n","Built embedding for batch 337 out of 507\n","0.022606372833251953\n","Built embedding for batch 338 out of 507\n","0.02125859260559082\n","Built embedding for batch 339 out of 507\n","0.021283626556396484\n","Built embedding for batch 340 out of 507\n","0.021831035614013672\n","Built embedding for batch 341 out of 507\n","0.021959304809570312\n","Built embedding for batch 342 out of 507\n","0.02154374122619629\n","Built embedding for batch 343 out of 507\n","0.020810365676879883\n","Built embedding for batch 344 out of 507\n","0.022243022918701172\n","Built embedding for batch 345 out of 507\n","0.020934104919433594\n","Built embedding for batch 346 out of 507\n","0.023543596267700195\n","Built embedding for batch 347 out of 507\n","0.020896434783935547\n","Built embedding for batch 348 out of 507\n","0.02102971076965332\n","Built embedding for batch 349 out of 507\n","0.02090620994567871\n","Built embedding for batch 350 out of 507\n","0.02114129066467285\n","Built embedding for batch 351 out of 507\n","0.0211789608001709\n","Built embedding for batch 352 out of 507\n","0.021029233932495117\n","Built embedding for batch 353 out of 507\n","0.021099328994750977\n","Built embedding for batch 354 out of 507\n","0.021057844161987305\n","Built embedding for batch 355 out of 507\n","0.02105116844177246\n","Built embedding for batch 356 out of 507\n","0.021396875381469727\n","Built embedding for batch 357 out of 507\n","0.024134397506713867\n","Built embedding for batch 358 out of 507\n","0.023247241973876953\n","Built embedding for batch 359 out of 507\n","0.021266937255859375\n","Built embedding for batch 360 out of 507\n","0.021180152893066406\n","Built embedding for batch 361 out of 507\n","0.022576332092285156\n","Built embedding for batch 362 out of 507\n","0.020919322967529297\n","Built embedding for batch 363 out of 507\n","0.02139735221862793\n","Built embedding for batch 364 out of 507\n","0.021067380905151367\n","Built embedding for batch 365 out of 507\n","0.021355628967285156\n","Built embedding for batch 366 out of 507\n","0.020782947540283203\n","Built embedding for batch 367 out of 507\n","0.021132707595825195\n","Built embedding for batch 368 out of 507\n","0.022337675094604492\n","Built embedding for batch 369 out of 507\n","0.021204710006713867\n","Built embedding for batch 370 out of 507\n","0.02145981788635254\n","Built embedding for batch 371 out of 507\n","0.021135807037353516\n","Built embedding for batch 372 out of 507\n","0.021421194076538086\n","Built embedding for batch 373 out of 507\n","0.02192234992980957\n","Built embedding for batch 374 out of 507\n","0.021287202835083008\n","Built embedding for batch 375 out of 507\n","0.02226853370666504\n","Built embedding for batch 376 out of 507\n","0.02116990089416504\n","Built embedding for batch 377 out of 507\n","0.02115321159362793\n","Built embedding for batch 378 out of 507\n","0.02218008041381836\n","Built embedding for batch 379 out of 507\n","0.021413087844848633\n","Built embedding for batch 380 out of 507\n","0.02107071876525879\n","Built embedding for batch 381 out of 507\n","0.021126270294189453\n","Built embedding for batch 382 out of 507\n","0.02133488655090332\n","Built embedding for batch 383 out of 507\n","0.020921945571899414\n","Built embedding for batch 384 out of 507\n","0.02071547508239746\n","Built embedding for batch 385 out of 507\n","0.022381305694580078\n","Built embedding for batch 386 out of 507\n","0.021164417266845703\n","Built embedding for batch 387 out of 507\n","0.021996498107910156\n","Built embedding for batch 388 out of 507\n","0.020693063735961914\n","Built embedding for batch 389 out of 507\n","0.021875858306884766\n","Built embedding for batch 390 out of 507\n","0.02135634422302246\n","Built embedding for batch 391 out of 507\n","0.02101898193359375\n","Built embedding for batch 392 out of 507\n","0.02121758460998535\n","Built embedding for batch 393 out of 507\n","0.022142648696899414\n","Built embedding for batch 394 out of 507\n","0.02087879180908203\n","Built embedding for batch 395 out of 507\n","0.020967721939086914\n","Built embedding for batch 396 out of 507\n","0.020929336547851562\n","Built embedding for batch 397 out of 507\n","0.024971723556518555\n","Built embedding for batch 398 out of 507\n","0.020070552825927734\n","Built embedding for batch 399 out of 507\n","0.02035212516784668\n","Built embedding for batch 400 out of 507\n","0.020284414291381836\n","Built embedding for batch 401 out of 507\n","0.019698619842529297\n","Built embedding for batch 402 out of 507\n","0.019977807998657227\n","Built embedding for batch 403 out of 507\n","0.01957106590270996\n","Built embedding for batch 404 out of 507\n","0.02127695083618164\n","Built embedding for batch 405 out of 507\n","0.0248563289642334\n","Built embedding for batch 406 out of 507\n","0.021348953247070312\n","Built embedding for batch 407 out of 507\n","0.021058082580566406\n","Built embedding for batch 408 out of 507\n","0.021747112274169922\n","Built embedding for batch 409 out of 507\n","0.020839452743530273\n","Built embedding for batch 410 out of 507\n","0.03242921829223633\n","Built embedding for batch 411 out of 507\n","0.02150106430053711\n","Built embedding for batch 412 out of 507\n","0.021023988723754883\n","Built embedding for batch 413 out of 507\n","0.020966053009033203\n","Built embedding for batch 414 out of 507\n","0.021082401275634766\n","Built embedding for batch 415 out of 507\n","0.02131056785583496\n","Built embedding for batch 416 out of 507\n","0.022142648696899414\n","Built embedding for batch 417 out of 507\n","0.02113628387451172\n","Built embedding for batch 418 out of 507\n","0.02136373519897461\n","Built embedding for batch 419 out of 507\n","0.021507978439331055\n","Built embedding for batch 420 out of 507\n","0.024549484252929688\n","Built embedding for batch 421 out of 507\n","0.021364450454711914\n","Built embedding for batch 422 out of 507\n","0.023958444595336914\n","Built embedding for batch 423 out of 507\n","0.0213015079498291\n","Built embedding for batch 424 out of 507\n","0.02156352996826172\n","Built embedding for batch 425 out of 507\n","0.021097898483276367\n","Built embedding for batch 426 out of 507\n","0.021010398864746094\n","Built embedding for batch 427 out of 507\n","0.02387547492980957\n","Built embedding for batch 428 out of 507\n","0.02126312255859375\n","Built embedding for batch 429 out of 507\n","0.021064043045043945\n","Built embedding for batch 430 out of 507\n","0.021171092987060547\n","Built embedding for batch 431 out of 507\n","0.020702838897705078\n","Built embedding for batch 432 out of 507\n","0.0244905948638916\n","Built embedding for batch 433 out of 507\n","0.021155834197998047\n","Built embedding for batch 434 out of 507\n","0.021274328231811523\n","Built embedding for batch 435 out of 507\n","0.021216154098510742\n","Built embedding for batch 436 out of 507\n","0.0211794376373291\n","Built embedding for batch 437 out of 507\n","0.021396398544311523\n","Built embedding for batch 438 out of 507\n","0.021605968475341797\n","Built embedding for batch 439 out of 507\n","0.022141695022583008\n","Built embedding for batch 440 out of 507\n","0.022319316864013672\n","Built embedding for batch 441 out of 507\n","0.02109551429748535\n","Built embedding for batch 442 out of 507\n","0.021220922470092773\n","Built embedding for batch 443 out of 507\n","0.02497076988220215\n","Built embedding for batch 444 out of 507\n","0.02183675765991211\n","Built embedding for batch 445 out of 507\n","0.02099609375\n","Built embedding for batch 446 out of 507\n","0.02098846435546875\n","Built embedding for batch 447 out of 507\n","0.021266698837280273\n","Built embedding for batch 448 out of 507\n","0.021091938018798828\n","Built embedding for batch 449 out of 507\n","0.021124839782714844\n","Built embedding for batch 450 out of 507\n","0.021089553833007812\n","Built embedding for batch 451 out of 507\n","0.02155756950378418\n","Built embedding for batch 452 out of 507\n","0.02095651626586914\n","Built embedding for batch 453 out of 507\n","0.0246274471282959\n","Built embedding for batch 454 out of 507\n","0.021947145462036133\n","Built embedding for batch 455 out of 507\n","0.021688222885131836\n","Built embedding for batch 456 out of 507\n","0.02119731903076172\n","Built embedding for batch 457 out of 507\n","0.0212554931640625\n","Built embedding for batch 458 out of 507\n","0.02111029624938965\n","Built embedding for batch 459 out of 507\n","0.020735740661621094\n","Built embedding for batch 460 out of 507\n","0.021049976348876953\n","Built embedding for batch 461 out of 507\n","0.02096080780029297\n","Built embedding for batch 462 out of 507\n","0.02120804786682129\n","Built embedding for batch 463 out of 507\n","0.022228479385375977\n","Built embedding for batch 464 out of 507\n","0.02101278305053711\n","Built embedding for batch 465 out of 507\n","0.02235865592956543\n","Built embedding for batch 466 out of 507\n","0.02103447914123535\n","Built embedding for batch 467 out of 507\n","0.021131038665771484\n","Built embedding for batch 468 out of 507\n","0.022002696990966797\n","Built embedding for batch 469 out of 507\n","0.020991802215576172\n","Built embedding for batch 470 out of 507\n","0.022077322006225586\n","Built embedding for batch 471 out of 507\n","0.021044015884399414\n","Built embedding for batch 472 out of 507\n","0.021118879318237305\n","Built embedding for batch 473 out of 507\n","0.021369457244873047\n","Built embedding for batch 474 out of 507\n","0.025430679321289062\n","Built embedding for batch 475 out of 507\n","0.020995378494262695\n","Built embedding for batch 476 out of 507\n","0.021213054656982422\n","Built embedding for batch 477 out of 507\n","0.021927356719970703\n","Built embedding for batch 478 out of 507\n","0.020729780197143555\n","Built embedding for batch 479 out of 507\n","0.02126145362854004\n","Built embedding for batch 480 out of 507\n","0.021239042282104492\n","Built embedding for batch 481 out of 507\n","0.02161121368408203\n","Built embedding for batch 482 out of 507\n","0.02181529998779297\n","Built embedding for batch 483 out of 507\n","0.021375417709350586\n","Built embedding for batch 484 out of 507\n","0.02184915542602539\n","Built embedding for batch 485 out of 507\n","0.021321535110473633\n","Built embedding for batch 486 out of 507\n","0.020993947982788086\n","Built embedding for batch 487 out of 507\n","0.0211946964263916\n","Built embedding for batch 488 out of 507\n","0.03109002113342285\n","Built embedding for batch 489 out of 507\n","0.028313398361206055\n","Built embedding for batch 490 out of 507\n","0.021033048629760742\n","Built embedding for batch 491 out of 507\n","0.020819425582885742\n","Built embedding for batch 492 out of 507\n","0.021109819412231445\n","Built embedding for batch 493 out of 507\n","0.021003007888793945\n","Built embedding for batch 494 out of 507\n","0.021094560623168945\n","Built embedding for batch 495 out of 507\n","0.020925521850585938\n","Built embedding for batch 496 out of 507\n","0.025774002075195312\n","Built embedding for batch 497 out of 507\n","0.021138429641723633\n","Built embedding for batch 498 out of 507\n","0.021329879760742188\n","Built embedding for batch 499 out of 507\n","0.02143692970275879\n","Built embedding for batch 500 out of 507\n","0.020769834518432617\n","Built embedding for batch 501 out of 507\n","0.022818326950073242\n","Built embedding for batch 502 out of 507\n","0.020961523056030273\n","Built embedding for batch 503 out of 507\n","0.02104330062866211\n","Built embedding for batch 504 out of 507\n","0.02075052261352539\n","Built embedding for batch 505 out of 507\n","0.021094322204589844\n","Built embedding for batch 506 out of 507\n","0.020951509475708008\n","Built embedding for batch 507 out of 507\n","0.017485618591308594\n"]}]},{"cell_type":"code","source":["#save embedding arrays to csv\n","np.savetxt(\"deepweeds_text_embeddings_train.csv\", text_embeddings, delimiter=\",\")\n","files.download('deepweeds_text_embeddings_train.csv')\n","\n","\n","#save embedding arrays to csv\n","np.savetxt(\"deepweeds_image_embeddings_train.csv\", image_embeddings, delimiter=\",\")\n","files.download('deepweeds_image_embeddings_train.csv')\n","\n","np.savetxt(\"deepweeds_labels_train.csv\", train_labels, delimiter=\",\")\n","files.download('deepweeds_labels_train.csv')"],"metadata":{"id":"D8pC2KsatYSJ","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1658924089053,"user_tz":-60,"elapsed":8613,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"91842ca6-e400-4e2c-8df3-ab38cdc90ec2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_4bad24e8-e223-434c-bcdc-5827a2ed7d07\", \"deepweeds_text_embeddings_train.csv\", 6487976)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_23296745-c66b-4678-bd5f-e9ad30f26bbe\", \"deepweeds_text_train_labels.csv\", 126700)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_221a6f64-2c71-4aaa-9c47-2fde7146d0f5\", \"deepweeds_image_embeddings_train.csv\", 259481600)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_4f86397e-c420-4f1c-810e-690fdf17ad2e\", \"deepweeds_labels_train.csv\", 126700)"]},"metadata":{}}]},{"cell_type":"code","source":["\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"4vuH54LYimeH","executionInfo":{"status":"ok","timestamp":1655060683724,"user_tz":-60,"elapsed":28,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"dcc68f20-9b16-4141-e451-5a6e522fe327"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_90e73cb8-0455-4181-92dc-881947a10452\", \"deepweeds_image_embeddings_train.csv\", 259584000)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_7392d307-1951-4890-8538-c12cf61422fa\", \"deepweeds_image_embeddings_test.csv\", 6490476)"]},"metadata":{}}]},{"cell_type":"markdown","source":["## Extract test embeddings"],"metadata":{"id":"F7sGvOHaT3YZ"}},{"cell_type":"code","source":["# load your dataset\n","dataset = datasets.ImageFolder(path_to_testing, transform=transform)\n","class_dict = dataset.class_to_idx\n","\n","testdataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=2)\n","print(len(dataset))"],"metadata":{"id":"ahmFgMddXu5s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658924123262,"user_tz":-60,"elapsed":9350,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"7bf0fa51-1bf0-459b-8685-cd9a17b66f91"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3355\n"]}]},{"cell_type":"code","source":["# INFO FOR IMPORTING TEST IMAGES\n","# load your dataset\n","transform = transforms.Compose([transforms.Resize(255),\n","                              transforms.CenterCrop(224),\n","                              transforms.ToTensor()])\n","test_dataset = datasets.ImageFolder(path_to_testing, transform=transform)\n","class_dict = test_dataset.class_to_idx\n","print(class_dict)\n","\n","testdataloader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=True, num_workers=2)\n","  \n","test_image_embeddings = np.zeros((len(test_dataset), 2048))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9GricwQ_ij1E","executionInfo":{"status":"ok","timestamp":1658924123263,"user_tz":-60,"elapsed":8,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"dae6e523-ace9-46aa-a6d2-fed2436c3afc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Chinese Apple': 0, 'Lantana': 1, 'Parkinsonia': 2, 'Parthenium': 3, 'Prickly Acacia': 4, 'Rubber Vine': 5, 'Siam Weed': 6, 'Snake Weed': 7}\n"]}]},{"cell_type":"code","source":["\n","test_text_embeddings= np.zeros((len(test_dataset), glove_size))\n","test_labels = []\n","batch_ct = 0\n","for id,(inputs, labels) in enumerate(testdataloader):\n","  inputs = inputs.to(device)\n","  labels = labels.to(device)\n","  print('Built embedding for batch {} out of {}'.format(id+1, len(testdataloader)))\n","  t = time.time()\n","\n","  # get testing labels\n","  test_labels += list(labels.cpu().data.numpy())\n","\n","  # get text embeddings\n","  batch_text_embeddings = getTextEmbeddings(labels, semantic_embeddings)\n","  test_text_embeddings[batch_ct:batch_ct+batch_text_embeddings.shape[0], 0:batch_text_embeddings.shape[1]] += batch_text_embeddings\n","\n","  # get image embeddings\n","  batch_image_embeddings = model(inputs).cpu().data.numpy()\n","  test_image_embeddings[batch_ct:batch_ct+batch_image_embeddings.shape[0], 0:batch_image_embeddings.shape[1]] += batch_image_embeddings\n","\n","  batch_ct += batch_size\n","  print(time.time() - t)\n"],"metadata":{"id":"-IYbxTTZiws3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"78d6bc4f-c658-4f77-a472-3e697c41e0c1","executionInfo":{"status":"ok","timestamp":1658924721835,"user_tz":-60,"elapsed":514170,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Built embedding for batch 1 out of 336\n","0.02036595344543457\n","Built embedding for batch 2 out of 336\n","0.019898653030395508\n","Built embedding for batch 3 out of 336\n","0.019655704498291016\n","Built embedding for batch 4 out of 336\n","0.019750595092773438\n","Built embedding for batch 5 out of 336\n","0.020234346389770508\n","Built embedding for batch 6 out of 336\n","0.020478487014770508\n","Built embedding for batch 7 out of 336\n","0.02030777931213379\n","Built embedding for batch 8 out of 336\n","0.019799232482910156\n","Built embedding for batch 9 out of 336\n","0.019557714462280273\n","Built embedding for batch 10 out of 336\n","0.01988387107849121\n","Built embedding for batch 11 out of 336\n","0.02044510841369629\n","Built embedding for batch 12 out of 336\n","0.019730091094970703\n","Built embedding for batch 13 out of 336\n","0.019502878189086914\n","Built embedding for batch 14 out of 336\n","0.01968526840209961\n","Built embedding for batch 15 out of 336\n","0.020270824432373047\n","Built embedding for batch 16 out of 336\n","0.019798755645751953\n","Built embedding for batch 17 out of 336\n","0.020630598068237305\n","Built embedding for batch 18 out of 336\n","0.019763469696044922\n","Built embedding for batch 19 out of 336\n","0.020380020141601562\n","Built embedding for batch 20 out of 336\n","0.019299030303955078\n","Built embedding for batch 21 out of 336\n","0.02030801773071289\n","Built embedding for batch 22 out of 336\n","0.019725799560546875\n","Built embedding for batch 23 out of 336\n","0.019742250442504883\n","Built embedding for batch 24 out of 336\n","0.019649982452392578\n","Built embedding for batch 25 out of 336\n","0.020415782928466797\n","Built embedding for batch 26 out of 336\n","0.019778013229370117\n","Built embedding for batch 27 out of 336\n","0.019584178924560547\n","Built embedding for batch 28 out of 336\n","0.019551992416381836\n","Built embedding for batch 29 out of 336\n","0.02052927017211914\n","Built embedding for batch 30 out of 336\n","0.01969122886657715\n","Built embedding for batch 31 out of 336\n","0.0202786922454834\n","Built embedding for batch 32 out of 336\n","0.01996636390686035\n","Built embedding for batch 33 out of 336\n","0.020604372024536133\n","Built embedding for batch 34 out of 336\n","0.019715547561645508\n","Built embedding for batch 35 out of 336\n","0.019569873809814453\n","Built embedding for batch 36 out of 336\n","0.019764184951782227\n","Built embedding for batch 37 out of 336\n","0.019521236419677734\n","Built embedding for batch 38 out of 336\n","0.019927978515625\n","Built embedding for batch 39 out of 336\n","0.02034449577331543\n","Built embedding for batch 40 out of 336\n","0.019824981689453125\n","Built embedding for batch 41 out of 336\n","0.020386219024658203\n","Built embedding for batch 42 out of 336\n","0.019823312759399414\n","Built embedding for batch 43 out of 336\n","0.02029252052307129\n","Built embedding for batch 44 out of 336\n","0.01982736587524414\n","Built embedding for batch 45 out of 336\n","0.019591331481933594\n","Built embedding for batch 46 out of 336\n","0.019774198532104492\n","Built embedding for batch 47 out of 336\n","0.020525217056274414\n","Built embedding for batch 48 out of 336\n","0.019908905029296875\n","Built embedding for batch 49 out of 336\n","0.020034074783325195\n","Built embedding for batch 50 out of 336\n","0.019812822341918945\n","Built embedding for batch 51 out of 336\n","0.02021336555480957\n","Built embedding for batch 52 out of 336\n","0.01961541175842285\n","Built embedding for batch 53 out of 336\n","0.01926112174987793\n","Built embedding for batch 54 out of 336\n","0.0196683406829834\n","Built embedding for batch 55 out of 336\n","0.019542932510375977\n","Built embedding for batch 56 out of 336\n","0.019789695739746094\n","Built embedding for batch 57 out of 336\n","0.019463539123535156\n","Built embedding for batch 58 out of 336\n","0.019974946975708008\n","Built embedding for batch 59 out of 336\n","0.01968979835510254\n","Built embedding for batch 60 out of 336\n","0.019736289978027344\n","Built embedding for batch 61 out of 336\n","0.020316362380981445\n","Built embedding for batch 62 out of 336\n","0.019898414611816406\n","Built embedding for batch 63 out of 336\n","0.020601272583007812\n","Built embedding for batch 64 out of 336\n","0.019772052764892578\n","Built embedding for batch 65 out of 336\n","0.020270824432373047\n","Built embedding for batch 66 out of 336\n","0.019677162170410156\n","Built embedding for batch 67 out of 336\n","0.020272493362426758\n","Built embedding for batch 68 out of 336\n","0.019838571548461914\n","Built embedding for batch 69 out of 336\n","0.020732879638671875\n","Built embedding for batch 70 out of 336\n","0.019954204559326172\n","Built embedding for batch 71 out of 336\n","0.02009725570678711\n","Built embedding for batch 72 out of 336\n","0.01973247528076172\n","Built embedding for batch 73 out of 336\n","0.019948959350585938\n","Built embedding for batch 74 out of 336\n","0.019747257232666016\n","Built embedding for batch 75 out of 336\n","0.02073979377746582\n","Built embedding for batch 76 out of 336\n","0.019750118255615234\n","Built embedding for batch 77 out of 336\n","0.020605087280273438\n","Built embedding for batch 78 out of 336\n","0.019682884216308594\n","Built embedding for batch 79 out of 336\n","0.0205690860748291\n","Built embedding for batch 80 out of 336\n","0.019597768783569336\n","Built embedding for batch 81 out of 336\n","0.020358562469482422\n","Built embedding for batch 82 out of 336\n","0.019864797592163086\n","Built embedding for batch 83 out of 336\n","0.020336627960205078\n","Built embedding for batch 84 out of 336\n","0.019315004348754883\n","Built embedding for batch 85 out of 336\n","0.020171403884887695\n","Built embedding for batch 86 out of 336\n","0.0196990966796875\n","Built embedding for batch 87 out of 336\n","0.019605398178100586\n","Built embedding for batch 88 out of 336\n","0.019809246063232422\n","Built embedding for batch 89 out of 336\n","0.02042841911315918\n","Built embedding for batch 90 out of 336\n","0.019721269607543945\n","Built embedding for batch 91 out of 336\n","0.0203859806060791\n","Built embedding for batch 92 out of 336\n","0.019674301147460938\n","Built embedding for batch 93 out of 336\n","0.020249366760253906\n","Built embedding for batch 94 out of 336\n","0.019753217697143555\n","Built embedding for batch 95 out of 336\n","0.020430803298950195\n","Built embedding for batch 96 out of 336\n","0.019751787185668945\n","Built embedding for batch 97 out of 336\n","0.020524263381958008\n","Built embedding for batch 98 out of 336\n","0.019695520401000977\n","Built embedding for batch 99 out of 336\n","0.020335674285888672\n","Built embedding for batch 100 out of 336\n","0.019648313522338867\n","Built embedding for batch 101 out of 336\n","0.02028369903564453\n","Built embedding for batch 102 out of 336\n","0.01990485191345215\n","Built embedding for batch 103 out of 336\n","0.02069878578186035\n","Built embedding for batch 104 out of 336\n","0.019627809524536133\n","Built embedding for batch 105 out of 336\n","0.020232677459716797\n","Built embedding for batch 106 out of 336\n","0.019764184951782227\n","Built embedding for batch 107 out of 336\n","0.020268917083740234\n","Built embedding for batch 108 out of 336\n","0.019144773483276367\n","Built embedding for batch 109 out of 336\n","0.02014446258544922\n","Built embedding for batch 110 out of 336\n","0.019788503646850586\n","Built embedding for batch 111 out of 336\n","0.0201873779296875\n","Built embedding for batch 112 out of 336\n","0.019943952560424805\n","Built embedding for batch 113 out of 336\n","0.020391464233398438\n","Built embedding for batch 114 out of 336\n","0.019880294799804688\n","Built embedding for batch 115 out of 336\n","0.020257234573364258\n","Built embedding for batch 116 out of 336\n","0.019939422607421875\n","Built embedding for batch 117 out of 336\n","0.02025318145751953\n","Built embedding for batch 118 out of 336\n","0.0196993350982666\n","Built embedding for batch 119 out of 336\n","0.02035379409790039\n","Built embedding for batch 120 out of 336\n","0.019701242446899414\n","Built embedding for batch 121 out of 336\n","0.02053546905517578\n","Built embedding for batch 122 out of 336\n","0.0197598934173584\n","Built embedding for batch 123 out of 336\n","0.020256757736206055\n","Built embedding for batch 124 out of 336\n","0.01963496208190918\n","Built embedding for batch 125 out of 336\n","0.02268075942993164\n","Built embedding for batch 126 out of 336\n","0.01970219612121582\n","Built embedding for batch 127 out of 336\n","0.020459890365600586\n","Built embedding for batch 128 out of 336\n","0.01961207389831543\n","Built embedding for batch 129 out of 336\n","0.020819425582885742\n","Built embedding for batch 130 out of 336\n","0.019633769989013672\n","Built embedding for batch 131 out of 336\n","0.02015066146850586\n","Built embedding for batch 132 out of 336\n","0.019674062728881836\n","Built embedding for batch 133 out of 336\n","0.019866466522216797\n","Built embedding for batch 134 out of 336\n","0.019709110260009766\n","Built embedding for batch 135 out of 336\n","0.020196914672851562\n","Built embedding for batch 136 out of 336\n","0.019714832305908203\n","Built embedding for batch 137 out of 336\n","0.020485401153564453\n","Built embedding for batch 138 out of 336\n","0.019664287567138672\n","Built embedding for batch 139 out of 336\n","0.01978445053100586\n","Built embedding for batch 140 out of 336\n","0.01970076560974121\n","Built embedding for batch 141 out of 336\n","0.019649505615234375\n","Built embedding for batch 142 out of 336\n","0.019635438919067383\n","Built embedding for batch 143 out of 336\n","0.020300865173339844\n","Built embedding for batch 144 out of 336\n","0.019745826721191406\n","Built embedding for batch 145 out of 336\n","0.01963353157043457\n","Built embedding for batch 146 out of 336\n","0.019779205322265625\n","Built embedding for batch 147 out of 336\n","0.020372867584228516\n","Built embedding for batch 148 out of 336\n","0.019582033157348633\n","Built embedding for batch 149 out of 336\n","0.019649267196655273\n","Built embedding for batch 150 out of 336\n","0.019660472869873047\n","Built embedding for batch 151 out of 336\n","0.020418167114257812\n","Built embedding for batch 152 out of 336\n","0.019863128662109375\n","Built embedding for batch 153 out of 336\n","0.020579099655151367\n","Built embedding for batch 154 out of 336\n","0.020032644271850586\n","Built embedding for batch 155 out of 336\n","0.020020484924316406\n","Built embedding for batch 156 out of 336\n","0.019679784774780273\n","Built embedding for batch 157 out of 336\n","0.019679784774780273\n","Built embedding for batch 158 out of 336\n","0.019719362258911133\n","Built embedding for batch 159 out of 336\n","0.019518375396728516\n","Built embedding for batch 160 out of 336\n","0.019809961318969727\n","Built embedding for batch 161 out of 336\n","0.01983642578125\n","Built embedding for batch 162 out of 336\n","0.019697189331054688\n","Built embedding for batch 163 out of 336\n","0.020311594009399414\n","Built embedding for batch 164 out of 336\n","0.01986384391784668\n","Built embedding for batch 165 out of 336\n","0.02063465118408203\n","Built embedding for batch 166 out of 336\n","0.01971125602722168\n","Built embedding for batch 167 out of 336\n","0.019492626190185547\n","Built embedding for batch 168 out of 336\n","0.01975870132446289\n","Built embedding for batch 169 out of 336\n","0.021529674530029297\n","Built embedding for batch 170 out of 336\n","0.019740819931030273\n","Built embedding for batch 171 out of 336\n","0.02028512954711914\n","Built embedding for batch 172 out of 336\n","0.019739389419555664\n","Built embedding for batch 173 out of 336\n","0.02037501335144043\n","Built embedding for batch 174 out of 336\n","0.020903587341308594\n","Built embedding for batch 175 out of 336\n","0.02016925811767578\n","Built embedding for batch 176 out of 336\n","0.021036863327026367\n","Built embedding for batch 177 out of 336\n","0.02025151252746582\n","Built embedding for batch 178 out of 336\n","0.019797086715698242\n","Built embedding for batch 179 out of 336\n","0.02033233642578125\n","Built embedding for batch 180 out of 336\n","0.02065587043762207\n","Built embedding for batch 181 out of 336\n","0.020473480224609375\n","Built embedding for batch 182 out of 336\n","0.01984238624572754\n","Built embedding for batch 183 out of 336\n","0.020642518997192383\n","Built embedding for batch 184 out of 336\n","0.019680500030517578\n","Built embedding for batch 185 out of 336\n","0.020827293395996094\n","Built embedding for batch 186 out of 336\n","0.019740819931030273\n","Built embedding for batch 187 out of 336\n","0.019433975219726562\n","Built embedding for batch 188 out of 336\n","0.019594192504882812\n","Built embedding for batch 189 out of 336\n","0.019645214080810547\n","Built embedding for batch 190 out of 336\n","0.020406007766723633\n","Built embedding for batch 191 out of 336\n","0.020631074905395508\n","Built embedding for batch 192 out of 336\n","0.019715070724487305\n","Built embedding for batch 193 out of 336\n","0.021128177642822266\n","Built embedding for batch 194 out of 336\n","0.01949763298034668\n","Built embedding for batch 195 out of 336\n","0.020183563232421875\n","Built embedding for batch 196 out of 336\n","0.019724369049072266\n","Built embedding for batch 197 out of 336\n","0.0244905948638916\n","Built embedding for batch 198 out of 336\n","0.019638538360595703\n","Built embedding for batch 199 out of 336\n","0.02094864845275879\n","Built embedding for batch 200 out of 336\n","0.019647598266601562\n","Built embedding for batch 201 out of 336\n","0.021207571029663086\n","Built embedding for batch 202 out of 336\n","0.020040035247802734\n","Built embedding for batch 203 out of 336\n","0.020310163497924805\n","Built embedding for batch 204 out of 336\n","0.019931793212890625\n","Built embedding for batch 205 out of 336\n","0.019568443298339844\n","Built embedding for batch 206 out of 336\n","0.01993274688720703\n","Built embedding for batch 207 out of 336\n","0.020424604415893555\n","Built embedding for batch 208 out of 336\n","0.020367860794067383\n","Built embedding for batch 209 out of 336\n","0.020411252975463867\n","Built embedding for batch 210 out of 336\n","0.022212982177734375\n","Built embedding for batch 211 out of 336\n","0.020213603973388672\n","Built embedding for batch 212 out of 336\n","0.020330429077148438\n","Built embedding for batch 213 out of 336\n","0.0210416316986084\n","Built embedding for batch 214 out of 336\n","0.021268367767333984\n","Built embedding for batch 215 out of 336\n","0.02074742317199707\n","Built embedding for batch 216 out of 336\n","0.01967167854309082\n","Built embedding for batch 217 out of 336\n","0.020334482192993164\n","Built embedding for batch 218 out of 336\n","0.01961827278137207\n","Built embedding for batch 219 out of 336\n","0.020688772201538086\n","Built embedding for batch 220 out of 336\n","0.020340442657470703\n","Built embedding for batch 221 out of 336\n","0.020995140075683594\n","Built embedding for batch 222 out of 336\n","0.019752025604248047\n","Built embedding for batch 223 out of 336\n","0.020626068115234375\n","Built embedding for batch 224 out of 336\n","0.019636869430541992\n","Built embedding for batch 225 out of 336\n","0.02059626579284668\n","Built embedding for batch 226 out of 336\n","0.02028942108154297\n","Built embedding for batch 227 out of 336\n","0.020392179489135742\n","Built embedding for batch 228 out of 336\n","0.02026677131652832\n","Built embedding for batch 229 out of 336\n","0.01939845085144043\n","Built embedding for batch 230 out of 336\n","0.020183086395263672\n","Built embedding for batch 231 out of 336\n","0.020319223403930664\n","Built embedding for batch 232 out of 336\n","0.020331621170043945\n","Built embedding for batch 233 out of 336\n","0.020776033401489258\n","Built embedding for batch 234 out of 336\n","0.02035069465637207\n","Built embedding for batch 235 out of 336\n","0.020352840423583984\n","Built embedding for batch 236 out of 336\n","0.020601511001586914\n","Built embedding for batch 237 out of 336\n","0.020232200622558594\n","Built embedding for batch 238 out of 336\n","0.019990921020507812\n","Built embedding for batch 239 out of 336\n","0.020557880401611328\n","Built embedding for batch 240 out of 336\n","0.020071744918823242\n","Built embedding for batch 241 out of 336\n","0.02023148536682129\n","Built embedding for batch 242 out of 336\n","0.020284652709960938\n","Built embedding for batch 243 out of 336\n","0.019579172134399414\n","Built embedding for batch 244 out of 336\n","0.01960444450378418\n","Built embedding for batch 245 out of 336\n","0.02029585838317871\n","Built embedding for batch 246 out of 336\n","0.020224332809448242\n","Built embedding for batch 247 out of 336\n","0.020327091217041016\n","Built embedding for batch 248 out of 336\n","0.01946401596069336\n","Built embedding for batch 249 out of 336\n","0.019382953643798828\n","Built embedding for batch 250 out of 336\n","0.020287275314331055\n","Built embedding for batch 251 out of 336\n","0.019840478897094727\n","Built embedding for batch 252 out of 336\n","0.020317554473876953\n","Built embedding for batch 253 out of 336\n","0.019661426544189453\n","Built embedding for batch 254 out of 336\n","0.020337343215942383\n","Built embedding for batch 255 out of 336\n","0.02024531364440918\n","Built embedding for batch 256 out of 336\n","0.01959371566772461\n","Built embedding for batch 257 out of 336\n","0.02092599868774414\n","Built embedding for batch 258 out of 336\n","0.02072620391845703\n","Built embedding for batch 259 out of 336\n","0.020301103591918945\n","Built embedding for batch 260 out of 336\n","0.02020740509033203\n","Built embedding for batch 261 out of 336\n","0.020375490188598633\n","Built embedding for batch 262 out of 336\n","0.019591569900512695\n","Built embedding for batch 263 out of 336\n","0.02142643928527832\n","Built embedding for batch 264 out of 336\n","0.02051401138305664\n","Built embedding for batch 265 out of 336\n","0.019851207733154297\n","Built embedding for batch 266 out of 336\n","0.019559383392333984\n","Built embedding for batch 267 out of 336\n","0.020534276962280273\n","Built embedding for batch 268 out of 336\n","0.020237207412719727\n","Built embedding for batch 269 out of 336\n","0.0208740234375\n","Built embedding for batch 270 out of 336\n","0.02013230323791504\n","Built embedding for batch 271 out of 336\n","0.020354747772216797\n","Built embedding for batch 272 out of 336\n","0.020361661911010742\n","Built embedding for batch 273 out of 336\n","0.020938634872436523\n","Built embedding for batch 274 out of 336\n","0.01964735984802246\n","Built embedding for batch 275 out of 336\n","0.01972055435180664\n","Built embedding for batch 276 out of 336\n","0.020383358001708984\n","Built embedding for batch 277 out of 336\n","0.019315481185913086\n","Built embedding for batch 278 out of 336\n","0.020293712615966797\n","Built embedding for batch 279 out of 336\n","0.01990652084350586\n","Built embedding for batch 280 out of 336\n","0.020430803298950195\n","Built embedding for batch 281 out of 336\n","0.019749879837036133\n","Built embedding for batch 282 out of 336\n","0.020264863967895508\n","Built embedding for batch 283 out of 336\n","0.020218610763549805\n","Built embedding for batch 284 out of 336\n","0.020563125610351562\n","Built embedding for batch 285 out of 336\n","0.019667863845825195\n","Built embedding for batch 286 out of 336\n","0.020342350006103516\n","Built embedding for batch 287 out of 336\n","0.020041704177856445\n","Built embedding for batch 288 out of 336\n","0.019659996032714844\n","Built embedding for batch 289 out of 336\n","0.019883394241333008\n","Built embedding for batch 290 out of 336\n","0.02036738395690918\n","Built embedding for batch 291 out of 336\n","0.020018577575683594\n","Built embedding for batch 292 out of 336\n","0.01955890655517578\n","Built embedding for batch 293 out of 336\n","0.019500017166137695\n","Built embedding for batch 294 out of 336\n","0.02031731605529785\n","Built embedding for batch 295 out of 336\n","0.020874738693237305\n","Built embedding for batch 296 out of 336\n","0.02027273178100586\n","Built embedding for batch 297 out of 336\n","0.020285367965698242\n","Built embedding for batch 298 out of 336\n","0.02027106285095215\n","Built embedding for batch 299 out of 336\n","0.020427703857421875\n","Built embedding for batch 300 out of 336\n","0.020206689834594727\n","Built embedding for batch 301 out of 336\n","0.020415544509887695\n","Built embedding for batch 302 out of 336\n","0.02028965950012207\n","Built embedding for batch 303 out of 336\n","0.01961970329284668\n","Built embedding for batch 304 out of 336\n","0.01959705352783203\n","Built embedding for batch 305 out of 336\n","0.01965618133544922\n","Built embedding for batch 306 out of 336\n","0.01994466781616211\n","Built embedding for batch 307 out of 336\n","0.020352602005004883\n","Built embedding for batch 308 out of 336\n","0.020642995834350586\n","Built embedding for batch 309 out of 336\n","0.020734071731567383\n","Built embedding for batch 310 out of 336\n","0.020275115966796875\n","Built embedding for batch 311 out of 336\n","0.019997119903564453\n","Built embedding for batch 312 out of 336\n","0.020399093627929688\n","Built embedding for batch 313 out of 336\n","0.019602060317993164\n","Built embedding for batch 314 out of 336\n","0.020160198211669922\n","Built embedding for batch 315 out of 336\n","0.019664287567138672\n","Built embedding for batch 316 out of 336\n","0.020425796508789062\n","Built embedding for batch 317 out of 336\n","0.020656347274780273\n","Built embedding for batch 318 out of 336\n","0.019557714462280273\n","Built embedding for batch 319 out of 336\n","0.02053999900817871\n","Built embedding for batch 320 out of 336\n","0.020581960678100586\n","Built embedding for batch 321 out of 336\n","0.019729137420654297\n","Built embedding for batch 322 out of 336\n","0.020522356033325195\n","Built embedding for batch 323 out of 336\n","0.020335912704467773\n","Built embedding for batch 324 out of 336\n","0.019887924194335938\n","Built embedding for batch 325 out of 336\n","0.019472122192382812\n","Built embedding for batch 326 out of 336\n","0.020256519317626953\n","Built embedding for batch 327 out of 336\n","0.01961231231689453\n","Built embedding for batch 328 out of 336\n","0.020571470260620117\n","Built embedding for batch 329 out of 336\n","0.02050495147705078\n","Built embedding for batch 330 out of 336\n","0.020640850067138672\n","Built embedding for batch 331 out of 336\n","0.020259857177734375\n","Built embedding for batch 332 out of 336\n","0.019537687301635742\n","Built embedding for batch 333 out of 336\n","0.02051854133605957\n","Built embedding for batch 334 out of 336\n","0.020722150802612305\n","Built embedding for batch 335 out of 336\n","0.01982879638671875\n","Built embedding for batch 336 out of 336\n","0.014090776443481445\n"]}]},{"cell_type":"code","source":["#save embedding arrays to csv\n","np.savetxt(\"deepweeds_text_embeddings_test.csv\", test_text_embeddings, delimiter=\",\")\n","np.savetxt(\"deepweeds_test_labels.csv\", test_labels, delimiter=\",\")"],"metadata":{"id":"HAZDWpdgXsxj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["files.download('deepweeds_text_embeddings_test.csv')\n","files.download('deepweeds_test_labels.csv')"],"metadata":{"id":"fp4jrk7CZkVV","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1658925498447,"user_tz":-60,"elapsed":5,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"b2dfade1-0116-4226-f966-b5556c061b6f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_e7dfa111-a172-49ac-ac68-d96fa658270d\", \"deepweeds_text_embeddings_test.csv\", 4296498)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_c0a9606e-849b-4f1e-a9a8-d0e2310366de\", \"deepweeds_test_labels.csv\", 83875)"]},"metadata":{}}]},{"cell_type":"code","source":["#save embedding arrays to csv\n","np.savetxt(\"deepweeds_image_embeddings_test.csv\", test_image_embeddings, delimiter=\",\")\n","np.savetxt(\"deepweeds_labels_test.csv\", test_labels, delimiter=\",\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"oYiOV8_DlUvt","executionInfo":{"status":"ok","timestamp":1658924727564,"user_tz":-60,"elapsed":5402,"user":{"displayName":"Nicolas Belissent","userId":"02829269761105174140"}},"outputId":"89084d1d-95bc-4c43-cd75-c168b3621b12"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_66b727f7-a5b7-428b-93b5-5eabc46a67fe\", \"deepweeds_image_embeddings_test.csv\", 171776000)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_df8c7e13-cecf-4bd4-a023-d5d0334ed552\", \"deepweeds_labels_test.csv\", 83875)"]},"metadata":{}}]}]}